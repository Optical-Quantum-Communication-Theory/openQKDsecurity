classdef QKDListModule < QKDModule
    % QKDListModule Instance of QKDModule (see further documentation
    % there). 
    % List modules all have a very standard use. As such, Description and
    % Channel modules, although subclasses, function in an identical way.
    % QKDListModule functions must have the following inputs and outputs.
    % Inputs:
    % * params: Structure with fields for the parameter names used by the
    %   module parser. Use with an module parser for easy input handling.
    % * options: Structure containing the technical options used by the
    %   function. Best practice to use a options parser from
    %   makeGlobalOptionsParser, then add any extra options on top of that.
    % * debugInfo: A handle object of Class DebugInfo so that users can
    %   store useful information for testing, and validation purposes.
    % 
    % Outputs:
    % * newParams: Structure with new parameters (given by name value
    %   pairs) generated by the function. These will often get merged into
    %   the list of original parameters by the caller, so don't copy
    %   parameters from params to here (unless you're overrighting them).
    % * modParser: The module Parser used on params. Currently, they have
    %   little function as an output, but in the future I hope to use them
    %   to identify which parameters are being used, overwritten, etc.
    % 
    %
    % See also QKDModule, QKDChannelModule, QKDDescriptionModule, makeGlobalOptionsParser, moduleParser, DebugInfo
    methods
        function obj = QKDListModule(modulefunction,options,optimizerOverrideOptions)
            % QKDListModule Same constructor as it's parent class.
            %
            % See also QKDModule
            arguments
                modulefunction (1,1) function_handle
                options (1,1) struct = struct();
                optimizerOverrideOptions (1,1) struct = struct();
            end
            obj = obj@QKDModule(modulefunction,options,optimizerOverrideOptions);
        end
    end
end